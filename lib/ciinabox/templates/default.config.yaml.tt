## ciinabox cfhighlander default config
maximum_availability_zones: 3
ecs_instance_type: t2.small

nat: 
  type: managed
  count: 1
  size: t3.micro
  spot: 'true'
  ami: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs'

vpc:
  azs: 2
  create_hosted_zone: true
  manage_ns_records: true
  vpc_cidr: 10.150.0.0/24
  subnet_mask: 28
  subnets:
    persistence:
      enable: false
    cache:
      enable: false
  acl_rules:
  -
    acl: public
    number: 80
    from: 22
    to: 22
    protocol: 6
    cidr: 0.0.0.0/0
  -
    acl: public
    number: 110
    from: 80
    to: 80
    protocol: 6
    cidr: 0.0.0.0/0
  -
    acl: public
    number: 120
    from: 443
    to: 443
    protocol: 6
    cidr: 0.0.0.0/0
  -
    acl: public
    number: 130
    from: 1024
    to: 65535
    protocol: 6
    cidr: 0.0.0.0/0
  -
    acl: public
    number: 100
    from: 0
    to: 65535
    protocol: -1
    egress: true
  -
    acl: private
    number: 100
    from: 0
    to: 65535
    protocol: -1
  -
    acl: private
    number: 100
    from: 0
    to: 65535
    protocol: -1
    egress: true
  dns_format: ${EnvironmentName}.${DnsDomain}
  config_export:  
    global:
    - dns_format

ecs:
  fargate_only_cluster: true
  ami: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'
  security_group_rules:
    - from: 22
      ip: ${VPCCidr}
      desc: SSH access for packer baking
    - from: 47001
      ip: ${VPCCidr}
      desc: WinRM TCP port for packer baking
    - from: 5985
      to: 5986
      ip: ${VPCCidr}
      desc: WinRM HTTP/S ports for packer baking
    - from: 2049
      ip: ${VPCCidr}
      desc: Allow EFS access from ECS tasks
  enable_efs: false
  cluster_name: ${EnvironmentName}-ciinabox
  iam_policies:
    rexray-efs-plugin:
      action:
        - elasticfilesystem:CreateFileSystem
        - elasticfilesystem:CreateMountTarget
        - ec2:DescribeSubnets
        - ec2:DescribeNetworkInterfaces
        - ec2:CreateNetworkInterface
        - elasticfilesystem:CreateTags
        - elasticfilesystem:DeleteMountTarget
        - ec2:DeleteNetworkInterface
        - elasticfilesystem:DescribeFileSystems
        - elasticfilesystem:DescribeMountTargets
        - elasticfilesystem:DeleteMountTarget
    ssm-ssh-access:
      action:
        - ssm:UpdateInstanceInformation
        - ssm:ListInstanceAssociations
        - ec2messages:GetMessages
        - ssmmessages:CreateControlChannel
        - ssmmessages:CreateDataChannel
        - ssmmessages:OpenControlChannel
        - ssmmessages:OpenDataChannel
  instance_tags:
    Name: ${EnvironmentName}-ciinabox-ecs-xx
    ciinabox:jenkins:label: master
    ciinabox:jenkins:type: master
  userdata: |
    echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
    yum install -y amazon-efs-utils nfs-utils amazon-ssm-agent
    systemctl start amazon-ssm-agent
    docker plugin install rexray/efs REXRAY_PREEMPT=true EFS_REGION=${AWS::Region} EFS_SECURITYGROUPS=${SecurityGroupEcs} --grant-all-permissions
    systemctl restart docker

loadbalancer:
  loadbalancer_attributes:
    idle_timeout.timeout_seconds: 300  
  records:
  - "*"  
  security_group_rules:
  - from: 80
    ip_blocks:
      - whitelist
    desc: ciinabox whitelist
  - from: 443
    ip_blocks:
      - whitelist
    desc: ciinabox whitelist
  - from: 443
    ip_blocks:
      - webhooks
    desc: Github and bitbucket webhooks
  listeners:
    http:
      port: 80
      protocol: http
      default:
        action:
          redirect: http_to_https
    https:
      port: 443
      protocol: https
      ssl_policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      default:
        certificate: website
        action:
          fixed:
            type: text/html
            code: 404
            body: |
              <!DOCTYPE html>
              <html>
                <body>
                  <h2>404</h2>
                  <h3><span id="demo" style="color: red"></span> ciinabox service not found</h3>
                  <script>
                  document.getElementById("demo").innerHTML = location.hostname;
                  </script>
                </body>
              </html> 

internal_zone:
  dns_domain: int.${RootDomainName}

internal_loadbalancer:
  enable: false
  dns_format: ${DnsDomain}
  use_zone_id: true
  loadbalancer_scheme: internal
  loadbalancer_attributes:
    idle_timeout.timeout_seconds: 300  
  records:
  - "*.int"  
  security_group_rules:
  - from: 80
    ip_blocks:
      - internal
  - from: 443
    ip_blocks:
      - internal
  listeners:
    inthttp:
      port: 80
      protocol: http
      default:
        action:
          redirect: http_to_https
    inthttps:
      port: 443
      protocol: https
      ssl_policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      default:
        certificate: website
        action:
          fixed:
            type: text/html
            code: 404
            body: |
              <!DOCTYPE html>
              <html>
                <body>
                  <h2>404</h2>
                  <h3><span id="demo" style="color: red"></span> ciinabox service not found</h3>
                  <script>
                  document.getElementById("demo").innerHTML = location.hostname;
                  </script>
                </body>
              </html> 

efs:
  security_group_rules:
    -
      from: 2049
      ip: ${VPCCidr}
      desc: vpc access to the efs file system
  access_points:
    -
      name: JenkinsHome
      posix_user:
        Gid: '1000'
        Uid: '1000'
      root_directory:
        Path: /var/jenkins_home
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '0755'

jcasc:
  image: <%= @config.dig('jenkins', 'image') || 'ghcr.io/base2services/jenkins-distribution' %>
  tag: <%= @config.dig('jenkins', 'version') || 'lts' %>

jenkins:
  cpu: 1024
  memory: 2048
  health_check_grace_period: 300
  volumes:
    - Name: 'jenkins-data'
      EFSVolumeConfiguration:
        AuthorizationConfig:
          AccessPointId:
            Ref: JenkinsHomeAccessPoint
        TransitEncryption: ENABLED
        FilesystemId:
          Ref: JenkinsFileSystem
  task_definition:
    jenkins:
      image: <%= @config.dig('jenkins', 'image') || 'ghcr.io/base2services/jenkins-distribution' %>
      tag: <%= @config.dig('jenkins', 'version') || 'lts' %>
      secrets:
        secretsmanager:
          JENKINS_PASSWORD: /${EnvironmentName}/jenkins/admin/password
          JCASC_RELOAD_TOKEN: /${EnvironmentName}/jenkins/jcasc/reload-token
      env_vars:
        AWS_REGION:
          Fn::Sub: ${AWS::Region}
        CASC_JENKINS_CONFIG:
          Ref: JcascS3Path
        TRY_UPGRADE_IF_NO_MARKER: 'true'
        PLUGINS_FORCE_UPGRADE: 'true'
        JAVA_OPTS: 
          Fn::Sub: >-
            -Dhudson.TcpSlaveAgentListener.hostName=jenkins.${EnvironmentName}.ciinabox 
            -Dhudson.TcpSlaveAgentListener.port=50000
            -Dhudson.TcpSlaveAgentListener.hostName=jenkins
            -Dhudson.TcpSlaveAgentListener.port=50000
            -Djenkins.install.runSetupWizard=false
            -Djenkins.security.ManagePermission=true
            -Djenkins.security.SystemReadPermission=true
            -Dhudson.security.ExtendedReadPermission=true
            <%= @config.dig('jenkins', 'java_opts') || '' %>
      ports:
      - 8080
      - 50000
      - 2049
      mounts:
        - ContainerPath: '/var/jenkins_home'
          SourceVolume: 'jenkins-data'
  targetgroup:
  - name: jenkins
    container: jenkins
    port: 8080
    protocol: http
    listener: https
    type: ip
    healthcheck:
      interval: 30
      timeout: 10
      healthy_count: 2
      unhealthy_count: 10
      path: /login
      code: 200
    rules:
      - name:  jenkins
        host: jenkins.*
        priority: 500
    attributes:
      deregistration_delay.timeout_seconds: 10
  <%- if !@config.dig('internal_loadbalancer', 'enable').nil?  && @config['internal_loadbalancer']['enable'] == true -%>
  - name: internalJenkinsfargate
    container: jenkins
    port: 8080
    protocol: http
    listener: inthttps
    type: ip
    healthcheck:
      interval: 30
      timeout: 10
      healthy_count: 2
      unhealthy_count: 10
      path: /login
      code: 200
    rules:
      - name:  internaljenkins
        host: jenkins.*
        priority: 500
    attributes:
      deregistration_delay.timeout_seconds: 10
  <%- end -%>  
  iam_policies:
    create-spot-service-liked-role:
      action:
        - iam:CreateServiceLinkedRole
      condition:
        StringLike:
          iam:AWSServiceName: spot.amazonaws.com
    cross-account-sts:
      action:
        - sts:AssumeRole
    iam-pass-role:
      action:
        - iam:ListRoles
        - iam:PassRole
        - iam:ListInstanceProfiles
    ec2-fleet-plugin:
      action:
        - ec2:*
    s3-list-ciinabox-bucket:
      action:
        - s3:ListBucket
        - s3:GetBucketLocation
      resource:
        - Fn::Sub: arn:aws:s3:::${S3Bucket}
        - Fn::Sub: arn:aws:s3:::${AWS::AccountId}.${AWS::Region}.cfhighlander.templates
    s3-rw:
      action:
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:GetObjectVersion
        - s3:PutObject
        - s3:PutObjectAcl
      resource:
        - Fn::Sub: arn:aws:s3:::${S3Bucket}/*
        - Fn::Sub: arn:aws:s3:::${AWS::AccountId}.${AWS::Region}.cfhighlander.templates/*
    secretsmanager-list:
      action:
        - secretsmanager:ListSecrets
    secretsmanager-get:
      action:
        - secretsmanager:GetSecretValue
      resource:
        - Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentName}/jenkins/*
    ssm-parameters:
      action:
        - ssm:GetParameter
        - ssm:GetParametersByPath
      resource:
        - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ciinabox/*
        - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/aws/*
    sns-publish:
      action:
        - sns:Publish
    ecr-manange-repos:
      action:
        - ecr:*
    codeartifact-manange-repos:
      action:
        - codeartifact:*
    codecommit-pull:
      action:
        - codecommit:BatchGet*
        - codecommit:BatchDescribe*
        - codecommit:Describe*
        - codecommit:EvaluatePullRequestApprovalRules
        - codecommit:Get*
        - codecommit:List*
        - codecommit:GitPull
  service_discovery:
    name: jenkins
    container_name: jenkins
  ingress_rules:
    - from: 2049
      cidr: 
        Fn::Sub: ${VPCCidr}
      desc: Jenkins efs volume
    - from: 8080
      cidr: 
       Fn::Sub: ${VPCCidr}
      desc: HTTP access from the public facing loadbalancer
    - from: 50000
      cidr: 
        Fn::Sub: ${VPCCidr}
      desc: Access from inbound Jenkins agents

ec2agents:
  iam_policies:
    sts:
      action:
        - sts:AssumeRole
    ecr-manange-repos:
      action:
        - ecr:*
    s3-list-ciinabox-bucket:
      action:
        - s3:ListBucket
        - s3:GetBucketLocation
      resource:
        - Fn::Sub: arn:aws:s3:::${S3Bucket}
        - Fn::Sub: arn:aws:s3:::${AWS::AccountId}.${AWS::Region}.cfhighlander.templates
    s3-rw:
      action:
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:GetObjectVersion
        - s3:PutObject
        - s3:PutObjectAcl
      resource:
        - Fn::Sub: arn:aws:s3:::${S3Bucket}/*
        - Fn::Sub: arn:aws:s3:::${AWS::AccountId}.${AWS::Region}.cfhighlander.templates/*
    ssm-ssh-access:
      action:
        - ssm:UpdateInstanceInformation
        - ssm:ListInstanceAssociations
        - ec2messages:GetMessages
        - ssmmessages:CreateControlChannel
        - ssmmessages:CreateDataChannel
        - ssmmessages:OpenControlChannel
        - ssmmessages:OpenDataChannel
    cloudformation:
      action:
        - cloudformation:ValidateTemplate

mfa: {}

ciinabox_services:
  selenium:
    enable: false
    fargate: true
    desired_count: 1
    version: 
      selenium: 3
    service:
      network_mode: awsvpc
      cpu: 512
      memory: 1024
      task_definition:
        selenium-hub:
          image: selenium/hub
          tag_param: SeleniumVersion
          ports:
          - 4444
        chrome:
          image: selenium/node-chrome
          tag_param: SeleniumVersion
          env_vars:
            HUB_HOST: localhost
            HUB_PORT: 4444
            START_XVFB: false
        firefox:
          image: selenium/node-firefox
          tag_param: SeleniumVersion
          env_vars:
            HUB_HOST: localhost
            HUB_PORT: 4444
            START_XVFB: false
            SE_OPTS: -port 5556
      targetgroup:
        name: selenium-hub
        container: selenium-hub
        port: 4444
        protocol: http
        listener: https
        type: ip
        healthcheck:
          interval: 30
          timeout: 10
          healthy_count: 2
          unhealthy_count: 10
          path: /grid/console
          code: 200
        rules:
          - name:  selenium
            host: selenium.*
            priority: 1010
        attributes:
          deregistration_delay.timeout_seconds: 10
      service_discovery:
        name: selenium
        container_name: selenium-hub
      iam_policies:
        ec2-regions:
          action:
            - ec2:DescribeRegions
      security_group_rules:
        - from: 4444
          ip: ${VPCCidr}
          desc: selenium access from inside the vpc
          
config_export:
  global:
    - maximum_availability_zones
    - ip_blocks
