## ciinabox cfhighlander default config

maximum_availability_zones: 3

ecs_instance_type: t2.small

nat: 
  type: managed
  count: 1
  size: t3.micro
  spot: 'true'
  ami: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs'

vpc:
  azs: 2
  create_hosted_zone: true
  manage_ns_records: true
  vpc_cidr: 10.150.0.0/24
  subnet_mask: 27
  subnets:
    persistence:
      enable: false
    cache:
      enable: false
  acl_rules:
  -
    acl: public
    number: 80
    from: 22
    to: 22
    protocol: 6
    cidr: 0.0.0.0/0
  -
    acl: public
    number: 110
    from: 80
    to: 80
    protocol: 6
    cidr: 0.0.0.0/0
  -
    acl: public
    number: 120
    from: 443
    to: 443
    protocol: 6
    cidr: 0.0.0.0/0
  -
    acl: public
    number: 130
    from: 1024
    to: 65535
    protocol: 6
    cidr: 0.0.0.0/0
  -
    acl: public
    number: 100
    from: 0
    to: 65535
    protocol: -1
    egress: true
  -
    acl: private
    number: 100
    from: 0
    to: 65535
    protocol: -1
  -
    acl: private
    number: 100
    from: 0
    to: 65535
    protocol: -1
    egress: true
  dns_format: ${EnvironmentName}.${DnsDomain}
  config_export:  
    global:
    - dns_format

ecs:
  ami: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'
  security_group_rules:
    - from: 22
      ip: ${VPCCidr}
      desc: SSH access for packer baking
    - from: 47001
      ip: ${VPCCidr}
      desc: WinRM TCP port for packer baking
    - from: 5985
      to: 5986
      ip: ${VPCCidr}
      desc: WinRM HTTP/S ports for packer baking
    - from: 2049
      ip: ${VPCCidr}
      desc: Allow EFS access from ECS tasks
  enable_efs: false
  cluster_name: ${EnvironmentName}-ciinabox
  iam_policies:
    rexray-efs-plugin:
      action:
        - elasticfilesystem:CreateFileSystem
        - elasticfilesystem:CreateMountTarget
        - ec2:DescribeSubnets
        - ec2:DescribeNetworkInterfaces
        - ec2:CreateNetworkInterface
        - elasticfilesystem:CreateTags
        - elasticfilesystem:DeleteMountTarget
        - ec2:DeleteNetworkInterface
        - elasticfilesystem:DescribeFileSystems
        - elasticfilesystem:DescribeMountTargets
        - elasticfilesystem:DeleteMountTarget
    ssm-ssh-access:
      action:
        - ssm:UpdateInstanceInformation
        - ssm:ListInstanceAssociations
        - ec2messages:GetMessages
        - ssmmessages:CreateControlChannel
        - ssmmessages:CreateDataChannel
        - ssmmessages:OpenControlChannel
        - ssmmessages:OpenDataChannel
  instance_tags:
    Name: ${EnvironmentName}-ciinabox-ecs-xx
    ciinabox:jenkins:label: master
    ciinabox:jenkins:type: master
  userdata: |
    echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
    yum install -y amazon-efs-utils nfs-utils amazon-ssm-agent
    systemctl start amazon-ssm-agent
    docker plugin install rexray/efs REXRAY_PREEMPT=true EFS_REGION=${AWS::Region} EFS_SECURITYGROUPS=${SecurityGroupEcs} --grant-all-permissions
    systemctl restart docker

loadbalancer:
  loadbalancer_attributes:
    idle_timeout.timeout_seconds: 300  
  records:
  - "*"  
  security_group_rules:
  - from: 80
    ip_blocks:
      - whitelist
    desc: ciinabox whitelist
  - from: 443
    ip_blocks:
      - whitelist
    desc: ciinabox whitelist
  - from: 443
    ip_blocks:
      - webhooks
    desc: Github and bitbucket webhooks
  listeners:
    http:
      port: 80
      protocol: http
      default:
        action:
          redirect: http_to_https
    https:
      port: 443
      protocol: https
      ssl_policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      default:
        certificate: website
        action:
          fixed:
            type: text/html
            code: 404
            body: |
              <!DOCTYPE html>
              <html>
                <body>
                  <h2>404</h2>
                  <h3><span id="demo" style="color: red"></span> ciinabox service not found</h3>
                  <script>
                  document.getElementById("demo").innerHTML = location.hostname;
                  </script>
                </body>
              </html> 

jenkins:
  network_mode: awsvpc
  health_check_grace_period: 300
  volumes:
    - docker-socket:/var/run/docker.sock
    - Name:
        Fn::Sub: ${EnvironmentName}-ciinabox-jenkins-master
      DockerVolumeConfiguration:
        Driver: rexray/efs
        Scope: shared
        Autoprovision: true
  task_definition:
    jenkins:
      image: base2/jenkins-distribution
      tag_param: Version
      tag_param_default: latest
      env_vars:
        ENVIRONMENT_NAME:
          Fn::Sub: ${EnvironmentName}
        AWS_REGION:
          Fn::Sub: ${AWS::Region}
        CASC_JENKINS_CONFIG:
          Ref: JcascS3Path
        JAVA_OPTS: 
          Fn::Sub: >-
            -Dhudson.TcpSlaveAgentListener.hostName=jenkins.${EnvironmentName}.ciinabox 
            -Dhudson.TcpSlaveAgentListener.port=50000
            -Dcb.BeekeeperProp.noFullUpgrade=true
            -Dcb.BeekeeperProp.disableIncrementalWizard=true
            -Dcom.cloudbees.jenkins.cjp.installmanager.CJPPluginManager.allRequired=true
            -Dhudson.TcpSlaveAgentListener.hostName=jenkins
            -Dhudson.TcpSlaveAgentListener.port=50000
            -Djenkins.install.runSetupWizard=false
      secrets:
        secretsmanager:
          JENKINS_PASSWORD: /${EnvironmentName}/jenkins/admin/password
      ports:
      - 8080
      - 50000
      mounts:
        - /var/run/docker.sock:docker-socket
        - ContainerPath: /var/cloudbees-jenkins-distribution
          SourceVolume:
            Fn::Sub: ${EnvironmentName}-ciinabox-jenkins-master
          ReadOnly: false
  targetgroup:
    name: jenkins
    container: jenkins
    port: 8080
    protocol: http
    listener: https
    type: ip
    healthcheck:
      interval: 30
      timeout: 10
      healthy_count: 2
      unhealthy_count: 10
      path: /login
      code: 200
    rules:
      - name:  jenkins
        host: jenkins.*
        priority: 1000
    attributes:
      deregistration_delay.timeout_seconds: 10
  iam_policies:
    cross-account-sts:
      action:
        - sts:AssumeRole
    iam-pass-role:
      action:
        - iam:ListRoles
        - iam:PassRole
        - iam:ListInstanceProfiles
    ec2-fleet-plugin:
      action:
        - ec2:*
    s3-list-ciinabox-bucket:
      action:
        - s3:ListBucket
        - s3:GetBucketLocation
      resource:
        - Fn::Sub: arn:aws:s3:::${S3Bucket}
    s3-rw:
      action:
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:GetObjectVersion
        - s3:PutObject
        - s3:PutObjectAcl
      resource:
        - Fn::Sub: arn:aws:s3:::${S3Bucket}/*
    secretsmanager-list:
      action:
        - secretsmanager:ListSecrets
    secretsmanager-get:
      action:
        - secretsmanager:GetSecretValue
      resource:
        - Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentName}/jenkins/*
    ssm-parameters:
      action:
        - ssm:GetParameter
      resource:
        - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ciinabox/*
    sns-publish:
      action:
        - sns:Publish
    ecr-mamange-repos:
      action:
        - ecr:*
  service_discovery:
    name: jenkins
    container_name: jenkins
  security_group_rules:
    - from: 8080
      ip: ${VPCCidr}
      desc: HTTP access from inside the vpc
    - from: 50000
      ip: ${VPCCidr}
      desc: Access from jenkins agents inside the vpc

ec2agents:
  iam_policies:
    sts:
      action:
        - sts:AssumeRole
    ecr-mamange-repos:
      action:
        - ecr:*
    s3-list-ciinabox-bucket:
      action:
        - s3:ListBucket
        - s3:GetBucketLocation
      resource:
        - Fn::Sub: arn:aws:s3:::${S3Bucket}
    s3-rw:
      action:
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:GetObjectVersion
        - s3:PutObject
        - s3:PutObjectAcl
      resource:
        - Fn::Sub: arn:aws:s3:::${S3Bucket}/*
    ssm-ssh-access:
      action:
        - ssm:UpdateInstanceInformation
        - ssm:ListInstanceAssociations
        - ec2messages:GetMessages
        - ssmmessages:CreateControlChannel
        - ssmmessages:CreateDataChannel
        - ssmmessages:OpenControlChannel
        - ssmmessages:OpenDataChannel
    cloudformation:
      action:
        - cloudformation:ValidateTemplate

config_export:
  global:
    - maximum_availability_zones
    - ip_blocks
